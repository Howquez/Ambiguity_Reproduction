?fwrite
#| output: false
if (!requireNamespace("groundhog", quietly = TRUE)) {
install.packages("groundhog")
library("groundhog")
}
pkgs <- c("magrittr", "data.table", "stringr", "Rmisc", "ggplot2", "patchwork",
"rstatix", "ggpubr", "glue", "lubridate", "plyr",
"lmtest", "sandwich", "stargazer" # packages for regression tables
)
groundhog::groundhog.library(pkg = pkgs,
date = "2023-09-25")
# data <- data.table::fread(file = "../data/processed/full.csv")
data <- readRDS(file="../data/processed/full.Rda")
data[, communication := as.factor(communication)]
data[, communication := factor(communication, levels = c("point", "both","interval"))]
data[, stage := as.factor(stage)]
data[, stage := factor(stage, levels = c("1", "2"))]
wide_data <- data.table::dcast(data,
participant.label + surprise + communication ~ stage,
value.var = c("E1", "E2", "E3", "E12", "E23","E13", "b", "a"))
setorder(wide_data, surprise, communication, participant.label)
wide_subset <- data.table::dcast(subset,
participant.label + surprise + communication ~ stage,
value.var = c("p1", "p2", "p3"))
View(wide_data)
cols <- str_subset(string = names(data), pattern = "E\\d+")
data[,
str_replace_all(string = cols, pattern = "^E", replacement = "m") := lapply(.SD, function(x) x / 100),
.SDcols = cols]
data[, p1 := 0.5 + (m1 - m23)/ (6*(mc-ms))]
data[, p2 := 0.5 + (m2 - m13)/ (6*(mc-ms))]
data[, p3 := 0.5 + (m3 - m12)/ (6*(mc-ms))]
wide_data <- data.table::dcast(data,
participant.label + surprise + communication ~ stage,
value.var = c("E1", "E2", "E3", "E12", "E23","E13", "b", "a"))
setorder(wide_data, surprise, communication, participant.label)
wide_subset <- data.table::dcast(subset,
participant.label + surprise + communication ~ stage,
value.var = c("p1", "p2", "p3"))
View(wide_data)
#| output: false
if (!requireNamespace("groundhog", quietly = TRUE)) {
install.packages("groundhog")
library("groundhog")
}
pkgs <- c("magrittr", "data.table", "stringr", "Rmisc", "ggplot2", "patchwork",
"rstatix", "ggpubr", "glue", "lubridate", "plyr",
"lmtest", "sandwich", "stargazer" # packages for regression tables
)
groundhog::groundhog.library(pkg = pkgs,
date = "2023-09-25")
# data <- data.table::fread(file = "../data/processed/full.csv")
data <- readRDS(file="../data/processed/full.Rda")
data[, communication := as.factor(communication)]
data[, communication := factor(communication, levels = c("point", "both","interval"))]
data[, stage := as.factor(stage)]
data[, stage := factor(stage, levels = c("1", "2"))]
cols <- str_subset(string = names(data), pattern = "E\\d+")
data[,
str_replace_all(string = cols, pattern = "^E", replacement = "m") := lapply(.SD, function(x) x / 100),
.SDcols = cols]
data[, p1 := 0.5 + (m1 - m23)/ (6*(mc-ms))]
data[, p2 := 0.5 + (m2 - m13)/ (6*(mc-ms))]
data[, p3 := 0.5 + (m3 - m12)/ (6*(mc-ms))]
wide_data <- data.table::dcast(data,
participant.label + surprise + communication ~ stage,
value.var = c("E1", "E2", "E3", "E12", "E23","E13", "b", "a"))
setorder(wide_data, surprise, communication, participant.label)
wide_subset <- data.table::dcast(subset,
participant.label + surprise + communication ~ stage,
value.var = c("p1", "p2", "p3"))
#| output: false
options(repos = c(CRAN = "https://cran.r-project.org"))
if (!requireNamespace("groundhog", quietly = TRUE)) {
install.packages("groundhog")
library("groundhog")
}
pkgs <- c("magrittr", "data.table", "stringr", "lubridate", "knitr",
"sandwich", "lmtest",
"sjPlot", "stargazer")
groundhog::groundhog.library(pkg = pkgs,
date = "2023-09-25")
# data <- data.table::fread(file = "../data/processed/full.csv")
data <- readRDS(file="../data/processed/full.Rda")
data[, communication := as.factor(communication)]
data[, communication := factor(communication, levels = c("point", "interval", "both"))]
data[communication == "confirmation",
.(mean = mean(b, na.rm = TRUE), mean = mean(b, na.rm = TRUE)),
by = stage]
data[communication == "point" & surprise == FALSE,
.(mean = mean(b, na.rm = TRUE), mean = mean(b, na.rm = TRUE)),
by = stage]
data[communication == "point" & surprise == FALSE,
.(mean = round(mean(b, na.rm = TRUE), digits = 2), mean = mean(b, na.rm = TRUE)),
by = stage]
data[communication == "point" & surprise == FALSE,
.(mean = round(mean(b, na.rm = TRUE), digits = 2), sd = round(sd(b, na.rm = TRUE), digits = 2)),
by = stage]
data[, .N, by = c(communication, surprise)]
data[, .N, by = c("communication", "surprise")]
data[, .N, by = c("communication", "surprise")][order(surprise, communication)]
data[stage == 2, .N, by = c("communication", "surprise")][order(surprise, communication)]
data[stage == 2, .N, by = c("communication", "surprise")][order(surprise, communication)]
# alternatively:
data[, length(unique(participant.label)), by = c("communication", "surprise")][order(surprise, communication)]
# alternatively:
data[, .(N = length(unique(participant.label))), by = c("communication", "surprise")][order(surprise, communication)]
data[stage == 2, .N, by = c("communication", "surprise")][order(surprise, communication)]
# alternatively:
data[, .(N = length(unique(participant.label))), by = c("communication", "surprise")][order(surprise, communication)]
demographics <- c("age_35_52","age_53_plus","female", "high_education", "high_income", "married", "parentship")
all <- c(demographics, "high_temperature","high_usage","high_general_risk","high_weather_risk","high_accuracy","high_credibility")
reformulate(c(demographics), response="b")
reformulate(c(all), response="b")
reformulate(c(demographics), response="a")
reformulate(c(all), response="a")
# ols_3_1 <- lm(formula = reformulate(c(demographics), response="b"),
#             data = data,
#             subset = (treated == FALSE))
# se_3_1  <- coeftest(ols_3_1, vcov = vcovHC(ols_3_1, type = "HC1"))
#
# ols_3_2 <- lm(formula = reformulate(c(all), response="b"),
#             data = data,
#             subset = (treated == FALSE))
# se_3_2  <- coeftest(ols_3_2, vcov = vcovHC(ols_3_2, type = "HC1"))
#
# ols_3_3 <- lm(formula = reformulate(c(demographics), response="a"),
#             data = data,
#             subset = (treated == FALSE))
# se_3_3  <- coeftest(ols_3_3, vcov = vcovHC(ols_3_3, type = "HC1"))
#
# ols_3_4 <- lm(formula = reformulate(c(all), response="a"),
#             data = data,
#             subset = (treated == FALSE))
# se_3_4  <- coeftest(ols_3_4, vcov = vcovHC(ols_3_4, type = "HC1"))
ols_3_1 <- lm(formula = b ~ age_35_52 + age_53_plus + female + high_education + high_income +
married + parentship,
data = data,
subset = (treated == FALSE))
se_3_1  <- coeftest(ols_3_1, vcov = vcovHC(ols_3_1, type = "HC1"))
ols_3_2 <- lm(formula = b ~ age_35_52 + age_53_plus + female + high_education + high_income +
married + parentship + high_temperature + high_usage + high_general_risk +
high_weather_risk + high_accuracy + high_credibility,
data = data,
subset = (treated == FALSE))
se_3_2  <- coeftest(ols_3_2, vcov = vcovHC(ols_3_2, type = "HC1"))
ols_3_3 <- lm(formula = a ~ age_35_52 + age_53_plus + female + high_education + high_income +
married + parentship,
data = data,
subset = (treated == FALSE))
se_3_3  <- coeftest(ols_3_3, vcov = vcovHC(ols_3_3, type = "HC1"))
ols_3_4 <- lm(formula = a ~ age_35_52 + age_53_plus + female + high_education + high_income +
married + parentship + high_temperature + high_usage + high_general_risk +
high_weather_risk + high_accuracy + high_credibility,
data = data,
subset = (treated == FALSE))
se_3_4  <- coeftest(ols_3_4, vcov = vcovHC(ols_3_4, type = "HC1"))
View(data)

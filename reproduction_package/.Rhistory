as.data.table()
test_stats_2 <- test_stats_2[stage == 2]
plot_top <- ggplot(data = tmp,
mapping = aes(x = as.factor(surprise),
y = outcome)) +
geom_bar(position = "dodge",
stat = "summary",
fun = "mean",
fill = colors[2]) +
limits +
scale_y_continuous(limits = c(0, 100), expand = c(0, NA)) +
layout +
stat_pvalue_manual(data = test_stats_2,
label = "{p} ({p.adj.signif})",
step.group.by = "stage",
tip.length = 0,
step.increase = 0.1,
y.position = y_1) +
stat_pvalue_manual(data = test_stats_1,
label = "{p} ({p.adj.signif})",
y.position = y_2,
tip.length = 0,
x = "surprise") +
labs(title = title,
x = " Surprising Condition",
y = glue(" {response}"))
rm(tmp)
plot_top
}
}
#| label: fig-OB1
#| fig-cap: 'Means of the matching probabilities for event E1 separated by treatments and part 1 and part 2. P-values of Wilcoxon signed-rank test comparing part 1 and 2 directly above the mean values. P-values of Wilcoxon–Mann–Whitney test comparing part 2 of different treatments at the top. Note: ∗p<0.10, ∗∗p<0.05, ∗∗∗p<0.01, ns: not significant'
top   <- plot_bars(response = "E1", surprise_sub = NA)
left  <- plot_bars(response = "E1", surprise_sub = FALSE)
right <- plot_bars(response = "E1", surprise_sub = TRUE)
(top / (left | right) & theme(legend.position = "bottom")) + plot_layout(guides = "collect")
#| output: false
options(repos = c(CRAN = "https://cran.r-project.org"))
if (!requireNamespace("groundhog", quietly = TRUE)) {
install.packages("groundhog")
library("groundhog")
}
pkgs <- c("magrittr", "data.table", "stringr", "Rmisc", "ggplot2", "patchwork",
"rstatix", "ggpubr", "glue", "lubridate", "plyr",
"lmtest", "sandwich", "stargazer" # packages for regression tables
)
groundhog::groundhog.library(pkg = pkgs,
date = "2023-09-25")
data      <- readRDS(file="../data/processed/full.Rda")
timeSpent <- data.table::fread(file = "../data/raw/PageTimes-2021-09-15.csv")
raw       <- data.table::fread(file="../data/raw/all_apps_wide_2021-09-15.csv")
data[, communication := as.factor(communication)]
data[, communication := factor(communication, levels = c("point", "both","interval"))]
data[, stage := as.factor(stage)]
data[, stage := factor(stage, levels = c("1", "2"))]
cols <- str_subset(string = names(data), pattern = "E\\d+")
data[,
str_replace_all(string = cols, pattern = "^E", replacement = "m") := lapply(.SD, function(x) x / 100),
.SDcols = cols]
data[, p1 := 0.5 + (m1 - m23)/ (6*(mc-ms))]
data[, p2 := 0.5 + (m2 - m13)/ (6*(mc-ms))]
data[, p3 := 0.5 + (m3 - m12)/ (6*(mc-ms))]
#| lst-label: lst-plot
#| lst-cap: Exclude Monotonicity Violations
strict_violators <- data[a >= 1 |
E1 > E12 | E1 > E13 |
E2 > E12 | E2 > E23 |
E3 > E13 | E3 > E23,
unique(participant.label)]
subset <- data[!(participant.label %in% strict_violators)]
wide_data <- data.table::dcast(data,
participant.label + surprise + communication ~ stage,
value.var = c("E1", "E2", "E3", "E12", "E23","E13", "b", "a"))
setorder(wide_data, surprise, communication, participant.label)
wide_subset <- data.table::dcast(subset,
participant.label + surprise + communication ~ stage,
value.var = c("p1", "p2", "p3"))
setorder(wide_subset, surprise, communication, participant.label)
#| lst-label: lst-euclidian_distance
#| lst-cap: Calculate Euclidian Distance for Subjective Probability Proxy
wide_subset[, euclidian_distance := sqrt((p1_1 - p1_2)^2 +
(p2_1 - p2_2)^2 +
(p3_1 - p3_2)^2)]
colors <- c("#F3B05C", "#1E4A75", "#65B5C0", "#AD5E21")
layout <- theme(panel.background = element_rect(fill = "white"),
legend.key = element_rect(fill = "white"),
panel.grid.major.y = element_line(colour = "grey",
linewidth = 0.25),
axis.ticks.y = element_blank(),
panel.grid.major.x = element_blank(),
axis.line.x.bottom = element_line(colour = "#000000",
linewidth = 0.5),
axis.line.y.left = element_blank(),
plot.title = element_text(size = rel(1))
)
#| lst-label: lst-plot-bars
#| lst-cap: plot_bars()
plot_bars <- function(response = "E", surprise_sub = NA, limits = ylim(-0.1, 100.1)){
if(response == "E1"|response == "E2"|response == "E3"){
y_1 = 73
y_2 = 55
} else {
y_1 = 73
y_2 = 63
}
if(!is.na(surprise_sub)){
# Plot bottom panels
tmp <- data[surprise == surprise_sub]
names(tmp)[names(tmp) == response] <- 'outcome'
if(surprise_sub){
title <- "Surprising Condition"
} else {
title <- "Confirming Condition"
}
test_stats_1 <- tmp %>%
group_by(communication) %>%
wilcox_test(formula = outcome ~ stage,
paired = T) %>%
adjust_pvalue(method = "none") %>%
add_significance(p.col = "p.adj",
cutpoints = c(0, 0.01, 0.05, 0.1, 1),
symbols = c( "***", "**", "*", "ns")) %>%
as.data.table()
test_stats_2 <- tmp %>%
group_by(stage) %>%
wilcox_test(formula = outcome ~ communication) %>%
adjust_pvalue(method = "none") %>%
add_significance(p.col = "p.adj",
cutpoints = c(0, 0.01, 0.05, 0.1, 1),
symbols = c( "***", "**", "*", "ns")) %>%
as.data.table()
test_stats_2 <- test_stats_2[stage == 2]
plot_bottom <- ggplot(data = tmp,
mapping = aes(x = as.factor(communication),
y = outcome)) +
geom_bar(position = "dodge",
stat = "summary",
fun = "mean",
fill = colors[2]) +
limits +
scale_y_continuous(limits = c(0, 100), expand = c(0, NA)) +
layout +
stat_pvalue_manual(data = test_stats_2,
label = "{p} ({p.adj.signif})",
step.group.by = "stage",
tip.length = 0,
step.increase = 0.1,
y.position = y_1) +
stat_pvalue_manual(data = test_stats_1,
label = "{p} ({p.adj.signif})",
y.position = y_2,
tip.length = 0,
x = "communication") +
labs(title = title,
x = "Communication",
y = glue("{response}"))
rm(tmp)
plot_bottom
} else {
# Plot the top panel
tmp <- data
names(tmp)[names(tmp) == response] <- 'outcome'
title <- "Both Conditions"
test_stats_1 <- tmp %>%
group_by(surprise) %>%
wilcox_test(formula = outcome ~ stage,
paired = T) %>%
adjust_pvalue(method = "none") %>%
add_significance(p.col = "p.adj",
cutpoints = c(0, 0.01, 0.05, 0.1, 1),
symbols = c( "***", "**", "*", "ns")) %>%
as.data.table()
test_stats_2 <- tmp %>%
group_by(stage) %>%
wilcox_test(formula = outcome ~ surprise) %>%
adjust_pvalue(method = "none") %>%
add_significance(p.col = "p.adj",
cutpoints = c(0, 0.01, 0.05, 0.1, 1),
symbols = c( "***", "**", "*", "ns")) %>%
as.data.table()
test_stats_2 <- test_stats_2[stage == 2]
plot_top <- ggplot(data = tmp,
mapping = aes(x = as.factor(surprise),
y = outcome)) +
geom_bar(position = "dodge",
stat = "summary",
fun = "mean",
fill = colors[2]) +
limits +
scale_y_continuous(limits = c(0, 100), expand = c(0, NA)) +
layout +
stat_pvalue_manual(data = test_stats_2,
label = "{p} ({p.adj.signif})",
step.group.by = "stage",
tip.length = 0,
step.increase = 0.1,
y.position = y_1) +
stat_pvalue_manual(data = test_stats_1,
label = "{p} ({p.adj.signif})",
y.position = y_2,
tip.length = 0,
x = "surprise") +
labs(title = title,
x = " Surprising Condition",
y = glue(" {response}"))
rm(tmp)
plot_top
}
}
#| lst-label: lst-plot-bars_2
#| lst-cap: plot_bars() for OAE
plot_bars2 <- function(data, response = "p", surprise_sub = NA, limits = ylim(-0.05, 1.02)){
if(response == "p1" | response == "p2" | response == "p3"){
y_1 = 0.6
y_2 = 0.4
} else {
y_1 = 1.4
y_2 = 1
}
if(!is.na(surprise_sub)){
# Plot bottom panels
tmp <- data[data$surprise == surprise_sub, ]
names(tmp)[names(tmp) == response] <- 'outcome'
if(surprise_sub){
title <- "Surprising Condition"
} else {
title <- "Confirming Condition"
}
test_stats_1 <- tmp %>%
dplyr::group_by(communication) %>%
rstatix::wilcox_test(formula = outcome ~ stage, paired = TRUE) %>%
rstatix::adjust_pvalue(method = "none") %>%
rstatix::add_significance(p.col = "p.adj",
cutpoints = c(0, 0.01, 0.05, 0.1, 1),
symbols = c("***", "**", "*", "ns")) %>%
dplyr::as_tibble()
test_stats_2 <- tmp %>%
dplyr::group_by(stage) %>%
rstatix::wilcox_test(formula = outcome ~ communication) %>%
rstatix::adjust_pvalue(method = "none") %>%
rstatix::add_significance(p.col = "p.adj",
cutpoints = c(0, 0.01, 0.05, 0.1, 1),
symbols = c("***", "**", "*", "ns")) %>%
dplyr::as_tibble()
test_stats_2 <- test_stats_2[test_stats_2$stage == 2, ]
plot_bottom <- ggplot2::ggplot(data = tmp,
mapping = ggplot2::aes(x = as.factor(communication), y = outcome)) +
ggplot2::geom_bar(ggplot2::aes(fill = stage),
position = "dodge",
stat = "summary",
fun = "mean") +
limits +
ggplot2::scale_fill_manual(values=c("black", "gray")) +
ggplot2::theme_classic() +
ggpubr::stat_pvalue_manual(data = test_stats_2,
label = "{p} ({p.adj.signif})",
step.group.by = "stage",
tip.length = 0,
step.increase = 0.1,
y.position = y_1) +
ggpubr::stat_pvalue_manual(data = test_stats_1,
label = "{p} ({p.adj.signif})",
y.position = y_2,
tip.length = 0,
x = "communication") +
ggplot2::labs(title = title, x = "Communication", y = glue::glue("{response}"))
rm(tmp)
return(plot_bottom)
} else {
# Plot the top panel
tmp <- data
names(tmp)[names(tmp) == response] <- 'outcome'
title <- "Both Conditions"
test_stats_1 <- tmp %>%
dplyr::group_by(surprise) %>%
rstatix::wilcox_test(formula = outcome ~ stage, paired = TRUE) %>%
rstatix::adjust_pvalue(method = "none") %>%
rstatix::add_significance(p.col = "p.adj",
cutpoints = c(0, 0.01, 0.05, 0.1, 1),
symbols = c("***", "**", "*", "ns")) %>%
dplyr::as_tibble()
test_stats_2 <- tmp %>%
dplyr::group_by(stage) %>%
rstatix::wilcox_test(formula = outcome ~ surprise) %>%
rstatix::adjust_pvalue(method = "none") %>%
rstatix::add_significance(p.col = "p.adj",
cutpoints = c(0, 0.01, 0.05, 0.1, 1),
symbols = c("***", "**", "*", "ns")) %>%
dplyr::as_tibble()
test_stats_2 <- test_stats_2[test_stats_2$stage == 2, ]
plot_top <- ggplot2::ggplot(data = tmp,
mapping = ggplot2::aes(x = as.factor(surprise), y = outcome)) +
ggplot2::geom_bar(ggplot2::aes(fill = stage),
position = "dodge",
stat = "summary",
fun = "mean") +
limits +
ggplot2::scale_fill_manual(values=c("black", "gray")) +
ggplot2::theme_classic() +
ggpubr::stat_pvalue_manual(data = test_stats_2,
label = "{p} ({p.adj.signif})",
step.group.by = "stage",
tip.length = 0,
step.increase = 0.1,
y.position = y_1) +
ggpubr::stat_pvalue_manual(data = test_stats_1,
label = "{p} ({p.adj.signif})",
y.position = y_2,
tip.length = 0,
x = "surprise") +
ggplot2::labs(title = title, x = " Surprising Condition", y = glue::glue("{response}"))
rm(tmp)
return(plot_top)
}
}
plot_scatter <- function(outcome.y = "b_2",
outcome.x = "b_1",
DT = wide_data[surprise == FALSE & communication == "both"],
breaks = seq(from = -1, to = 1, by = 0.5),
limits = c(-1, 1),
# manual annotation positions:
x1 = 0.9,
x2 = 0.3,
x3 = -0.6,
x4 = 0.6,
y1 = - 0.115,
y2 = 1.05,
y3 = 0.7,
y4 = -0.7){
# Percentage Annotation
p1 <- scales::percent(x = sum(DT[,..outcome.y] > DT[,..outcome.x], na.rm = TRUE) / DT[, .N],
accuracy = 1)
p2 <- scales::percent(x = sum(DT[,..outcome.y] < DT[,..outcome.x], na.rm = TRUE) / DT[, .N],
accuracy = 1)
# Spearman Correlation for Subtitle
ro.value <- round(x = cor(DT[,..outcome.x],
DT[,..outcome.y],
method = c("spearman")),
digits = 2)
# Plot
plot <- ggplot(data = DT,
mapping = aes(x = get(outcome.x),
y = get(outcome.y))) +
geom_count(shape = 1, show.legend = FALSE) +
# add axes and diagonal
geom_vline(xintercept = 0) +
geom_hline(yintercept = 0) +
geom_abline(intercept = 0, slope = 1, linewidth = 0.6) +
# remove all the other lines
theme(line = element_blank(),
panel.background = element_rect(fill = "white",
colour = "white",
linetype = "solid")) +
# define axis labels
labs(x = as.expression(bquote(rho~"="~.(ro.value))),
y = "") +
# add annotations
geom_text(x = x1, y = y1, label = "Part 1") +
geom_text(x = x2, y = y2, label = "Part 2") +
geom_text(x = x3, y = y3, label = p1) +
geom_text(x = x4, y = y4, label = p2) +
# define consistent axis breaks etc.
scale_x_continuous(breaks = breaks, lim = limits) +
scale_y_continuous(breaks = breaks, lim = limits)
plot
}
# Wrapper function with a consistent parameter handling approach
plot_scatter_with_defaults <- function(DT, figure = "oc1") {
# Define defaults for each set
defaults <- list(
oc1 = list(outcome.y = "b_2", outcome.x = "b_1",
breaks = seq(from = -1, to = 1, by = 0.5),
limits = c(-1, 1),
x1 = 0.9, x2 = 0.3, x3 = -0.6, x4 = 0.6,
y1 = -0.115, y2 = 1.05, y3 = 0.7, y4 = -0.7),
oc2 = list(outcome.y = "a_2", outcome.x = "a_1",
breaks = seq(from = -2, to = 4, by = 1),
limits = c(-2, 4),
x1 = 3.4, x2 = 0.8, x3 = -1.5, x4 = 1.5,
y1 = -0.4, y2 = 0.39, y3 = 1.9, y4 = -1.9),
oc3 = list(outcome.y = "E1_2", outcome.x = "E1_1",
breaks = seq(from = 0, to = 100, by = 50),
limits = c(0, 101),
x1 = 90, x2 = 15, x3 = 15, x4 = 90,
y1 = 5, y2 = 100, y3 = 80, y4 = 20),
oc4 = list(outcome.y = "E2_2", outcome.x = "E2_1",
breaks = seq(from = 0, to = 100, by = 50),
limits = c(0, 101),
x1 = 90, x2 = 15, x3 = 15, x4 = 90,
y1 = 5, y2 = 100, y3 = 80, y4 = 20),
oc5 = list(outcome.y = "E3_2", outcome.x = "E3_1",
breaks = seq(from = 0, to = 100, by = 50),
limits = c(0, 101),
x1 = 90, x2 = 15, x3 = 15, x4 = 90,
y1 = 5, y2 = 100, y3 = 80, y4 = 20),
oc6 = list(outcome.y = "E12_2", outcome.x = "E12_1",
breaks = seq(from = 0, to = 100, by = 50),
limits = c(0, 101),
x1 = 90, x2 = 15, x3 = 15, x4 = 90,
y1 = 5, y2 = 100, y3 = 80, y4 = 20),
oc7 = list(outcome.y = "E13_2", outcome.x = "E13_1",
breaks = seq(from = 0, to = 100, by = 50),
limits = c(0, 101),
x1 = 90, x2 = 15, x3 = 15, x4 = 90,
y1 = 5, y2 = 100, y3 = 80, y4 = 20),
oc8 = list(outcome.y = "E23_2", outcome.x = "E23_1",
breaks = seq(from = 0, to = 100, by = 50),
limits = c(0, 101),
x1 = 90, x2 = 15, x3 = 15, x4 = 90,
y1 = 5, y2 = 100, y3 = 80, y4 = 20)
)
# Remove the non-required default params before calling the plot function
default_params <- defaults[[figure]]
# Combine all parameters
args <- c(list(DT = DT), default_params)
# Call the original plot function with the combined arguments
do.call(plot_scatter, args)
}
#| label: fig-OA1
#| warning: false
#| fig-cap: 'Average response time of the 12 ambiguity tasks of the full sample (1505 observations; outliers removed as described in the figure).'
timeSpent[,
lag := shift(epoch_time_completed, fill = NA, type = "lag"),
by = c("session_code", "participant_code")]
timeSpent[,
duration := epoch_time_completed - lag,
by = c("session_code", "participant_code")]
timeSpent[,
completion := epoch_time_completed %>% max() - epoch_time_completed %>% min(),
by = c("session_code", "participant_code")]
duration <- timeSpent[participant_code %in% data$participant.code,
.(
session_code,
participant_code,
app_name,
page_name,
page_index,
page_submission = epoch_time_completed,
time_spent = duration,
completion_time = completion
)]
N <- duration[, participant_code %>% unique() %>% length()]
tmp <- duration[app_name == "Baillon" & page_name == "Baillon_Decision",
.(time_spent = time_spent %>% sum()),
by = c("session_code", "participant_code", "page_index", "page_name")]
tmp[, round := page_index-2, by = c("participant_code")]
# remove outliers
plotDT <- tmp[,
.SD[time_spent < quantile(time_spent, probs = 0.99)],
by = page_index]
ggplot(data = summarySE(data = plotDT,
measurevar = "time_spent",
groupvars=c("round"),
na.rm = FALSE,
conf.interval = 0.95,
.drop = TRUE),
mapping = aes(x = round, y = time_spent)) +
geom_hline(yintercept = 0) +
layout +
theme(legend.position="bottom") +
geom_line(show.legend=FALSE, color = colors[2], lty=2) +
geom_errorbar(aes(ymin=time_spent-ci, ymax=time_spent+ci), width=.25, alpha = 0.5, color = colors[3]) +
geom_point(color = colors[2]) +
scale_x_continuous(name="", breaks = 1:12) +
scale_y_continuous(limits = c(0, NA), expand = c(0, 0),
breaks = c(0,
plotDT[round == 1, time_spent %>% mean() %>% round(digits=0)],
plotDT[round == 2, time_spent %>% mean() %>% round(digits=0)],
plotDT[round == 7, time_spent %>% mean() %>% round(digits=0)],
plotDT[round == 12, time_spent %>% mean() %>% round(digits=0)])) +
labs(y = "Response Time in Seconds", caption = "Bars indicate 95% confidence intervals.
\nOutliers (identified by 99.0 quantile) removed.")
rm(list = c("tmp", "timeSpent", "duration", "plotDT", "pkgs"))
#| label: fig-OA2a
#| fig-cap: 'Dropout participants of the experiment by page number.'
ggplot(data = raw[nchar(participant.label) == 32 & session.is_demo == 0 & participant._index_in_pages < 20],
aes(x=participant._index_in_pages)) +
geom_hline(yintercept = 0) +
geom_histogram(binwidth = 1,
fill = colors[2])  +
scale_y_continuous(limits = c(0, NA), expand = c(0, 0)) +
# scale_y_log10(breaks=c(0, 1, 2, 3, 4, 5, 10, 100), expand = c(0, NA)) +
layout +
labs(x = "Pages") +
scale_x_continuous(breaks = c(2),
labels = c("Instructions")) +
labs(y = "Count", x = "Pages")
#| label: fig-OA2b
#| fig-cap: 'Dropout participants by treatment after introduction of the treatment.'
raw[Intro.1.player.location == "Ilomantsi",
conditions := paste0("contrad.-",
str_replace_all(string = Intro.1.player.treatment,
pattern = "_",
replacement = " "))]
raw[Intro.1.player.location == "Weiskirchen",
conditions := paste0("conf.-",
str_replace_all(string = Intro.1.player.treatment,
pattern = "_",
replacement = " "))]
ggplot(raw[participant._index_in_pages > 8 & nchar(participant.label) == 32 & session.is_demo == 0 & participant._index_in_pages < 20],
aes(x  = conditions)) +
geom_hline(yintercept = 0) +
geom_bar(fill = colors[2])  +
scale_y_continuous(limits = c(0, NA), expand = c(0, NA)) +
layout +
labs(x = "Treatments", y = "Count")
#| label: fig-OB1
#| fig-cap: 'Means of the matching probabilities for event E1 separated by treatments and part 1 and part 2. P-values of Wilcoxon signed-rank test comparing part 1 and 2 directly above the mean values. P-values of Wilcoxon–Mann–Whitney test comparing part 2 of different treatments at the top. Note: ∗p<0.10, ∗∗p<0.05, ∗∗∗p<0.01, ns: not significant'
top   <- plot_bars(response = "E1", surprise_sub = NA)
left  <- plot_bars(response = "E1", surprise_sub = FALSE)
right <- plot_bars(response = "E1", surprise_sub = TRUE)
(top / (left | right) & theme(legend.position = "bottom")) + plot_layout(guides = "collect")

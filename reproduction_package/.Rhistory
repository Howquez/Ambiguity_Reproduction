geom_bar(stat = "summary",
fun = mean,
fill = colors[2]) +
scale_y_continuous(limits = c(0, 4),
expand = c(0, NA)) +
# geom_signif(comparisons = list(c("FALSE", "TRUE")),
#             annotations = paste0(formatted_p_value, " (", p_value_text, ")"),
#             y_position = 3.5,  # Adjust this based on your plot's y-limits
#             tip_length = 0,
#             size = 0.5) +
labs(x = "Treatment",
y = "Credibility") +
layout
comparisons <- list(c("point", "interval"),
c("point", "both"),
c("interval", "both"))
p_values <- sapply(comparisons, function(comp) {
test <- wilcox.test(Credibility ~ Treatment, data = dt[Treatment %in% comp])
test$p.value
})
p_values <- sapply(comparisons, function(comp) {
test <- wilcox.test(credibility ~ communication, data = dt[communication %in% comp])
test$p.value
})
test <- wilcox.test(credibility ~ communication, data = data[communication %in% comp])
p_values <- sapply(comparisons, function(comp) {
test <- wilcox.test(credibility ~ communication, data = data[communication %in% comp])
test$p.value
})
p_values_text <- sapply(p_values, function(p) {
ifelse(p < 0.01, "***", ifelse(p < 0.05, "**", ifelse(p < 0.10, "*", "ns")))
})
formatted_p_values <- format(x = p_values, digits = 3, scientific = TRUE)
formatted_p_values
comparisons <- list(c("point", "interval"),
c("point", "both"),
c("interval", "both"))
p_values <- sapply(comparisons, function(comp) {
test <- wilcox.test(credibility ~ communication, data = data[treated == 1 & communication %in% comp])
test$p.value
})
p_values_text <- sapply(p_values, function(p) {
ifelse(p < 0.01, "***", ifelse(p < 0.05, "**", ifelse(p < 0.10, "*", "ns")))
})
formatted_p_values <- format(x = p_values, digits = 3, scientific = TRUE)
ggplot(data = data[treated == 1],
mapping = aes(y = credibility,
x = communication)) +
geom_bar(stat = "summary",
fun = mean,
fill = colors[2]) +
scale_y_continuous(limits = c(0, 4),
expand = c(0, NA)) +
# geom_signif(comparisons = list(c("FALSE", "TRUE")),
#             annotations = paste0(formatted_p_value, " (", p_value_text, ")"),
#             y_position = 3.5,  # Adjust this based on your plot's y-limits
#             tip_length = 0,
#             size = 0.5) +
labs(x = "Treatment",
y = "Credibility") +
layout
formatted_p_values
ggplot(data = data[treated == 1],
mapping = aes(y = credibility,
x = communication)) +
geom_bar(stat = "summary",
fun = mean,
fill = colors[2]) +
scale_y_continuous(limits = c(0, 4),
expand = c(0, NA)) +
geom_signif(comparisons = comparisons,
annotations = paste0(formatted_p_value, " (", p_value_text, ")"),
y_position = c(3.5, 3.8, 4.1),
tip_length = 0,
size = 0.5) +
labs(x = "Treatment",
y = "Credibility") +
layout
ggplot(data = data[treated == 1],
mapping = aes(y = credibility,
x = communication)) +
geom_bar(stat = "summary",
fun = mean,
fill = colors[2]) +
scale_y_continuous(limits = c(0, 4),
expand = c(0, NA)) +
geom_signif(comparisons = comparisons,
annotations = paste0(formatted_p_value, " (", p_value_text, ")"),
y_position = c(3.0, 3.3, 3.6),
tip_length = 0,
size = 0.5) +
labs(x = "Treatment",
y = "Credibility") +
layout
p_values <- sapply(comparisons, function(comp) {
test <- wilcox.test(credibility ~ communication, data = data[treated == 1 & communication %in% comp])
test$p.value
})
p_values(comparisons[[1]])
p_values <- sapply(comparisons, function(comp) {
test <- wilcox.test(credibility ~ communication, data = data[treated == 1 & communication %in% comp])
test$p.value
})
p_values(comparisons[[1]])
p_values
format(x = p_values, digits = 3, scientific = TRUE)
ggplot(data = data[treated == 1],
mapping = aes(y = credibility,
x = communication)) +
geom_bar(stat = "summary",
fun = mean,
fill = colors[2]) +
scale_y_continuous(limits = c(0, 4),
expand = c(0, NA)) +
geom_signif(comparisons = comparisons,
annotations = paste0(formatted_p_values, " (", p_values_text, ")"),
y_position = c(3.0, 3.3, 3.6),
tip_length = 0,
size = 0.5) +
labs(x = "Treatment",
y = "Credibility") +
layout
p_values <- sapply(comparisons, function(comp) {
test <- wilcox.test(formula = credibility ~ communication,
data = data[treated == 1 & surprise == FALSE & communication %in% comp])
test$p.value
})
p_values
p_values_text <- sapply(p_values, function(p) {
ifelse(p < 0.01, "***", ifelse(p < 0.05, "**", ifelse(p < 0.10, "*", "ns")))
})
formatted_p_values <- format(x = p_values, digits = 3, scientific = TRUE)
formatted_p_values
comparisons <- list(c("point", "interval"),
c("point", "both"),
c("interval", "both"))
p_values <- sapply(comparisons, function(comp) {
test <- wilcox.test(formula = credibility ~ communication,
data = data[treated == 1 & surprise == FALSE & communication %in% comp])
test$p.value
})
p_values
p_values_text <- sapply(p_values, function(p) {
ifelse(p < 0.01, "***", ifelse(p < 0.05, "**", ifelse(p < 0.10, "*", "ns")))
})
formatted_p_values <- format(x = p_values, digits = 3, scientific = TRUE)
ggplot(data = data[treated == 1],
mapping = aes(y = credibility,
x = communication)) +
geom_bar(stat = "summary",
fun = mean,
fill = colors[2]) +
scale_y_continuous(limits = c(0, 4),
expand = c(0, NA)) +
geom_signif(comparisons = comparisons,
annotations = paste0(formatted_p_values, " (", p_values_text, ")"),
y_position = c(3.0, 3.3, 3.6),
tip_length = 0,
size = 0.5) +
labs(x = "Treatment",
y = "Credibility") +
layout
comparisons <- list(c("point", "interval"),
c("point", "both"),
c("interval", "both"))
p_values <- sapply(comparisons, function(comp) {
test <- wilcox.test(formula = credibility ~ communication,
data = data[treated == 1 & surprise == FALSE & communication %in% comp])
test$p.value
})
p_values
p_values_text <- sapply(p_values, function(p) {
ifelse(p < 0.01, "***", ifelse(p < 0.05, "**", ifelse(p < 0.10, "*", "ns")))
})
formatted_p_values <- format(x = p_values, digits = 3, scientific = TRUE)
ggplot(data = data[treated == 1],
mapping = aes(y = credibility,
x = communication)) +
geom_bar(stat = "summary",
fun = mean,
fill = colors[2]) +
scale_y_continuous(limits = c(0, 4),
expand = c(0, NA)) +
geom_signif(comparisons = comparisons,
annotations = paste0(formatted_p_values, " (", p_values_text, ")"),
y_position = c(3.0, 3.3, 3.6),
tip_length = 0,
size = 0.5) +
labs(x = "Treatment",
y = "Credibility") +
layout
#| output: false
options(repos = c(CRAN = "https://cran.r-project.org"))
if (!requireNamespace("groundhog", quietly = TRUE)) {
install.packages("groundhog")
library("groundhog")
}
pkgs <- c("magrittr", "data.table", "stringr", "Rmisc", "ggplot2", "ggsignif")
groundhog::groundhog.library(pkg = pkgs,
date = "2023-09-25")
data      <- readRDS(file="../data/processed/full.Rda")
timeSpent <- data.table::fread(file = "../data/raw/PageTimes-2021-09-15.csv")
raw       <- data.table::fread(file="../data/raw/all_apps_wide_2021-09-15.csv")
colors <- c("#F3B05C", "#1E4A75", "#65B5C0", "#AD5E21")
layout <- theme(panel.background = element_rect(fill = "white"),
legend.key = element_rect(fill = "white"),
panel.grid.major.y = element_line(colour = "grey",
linewidth = 0.25),
axis.ticks.y = element_blank(),
panel.grid.major.x = element_blank(),
axis.line.x.bottom = element_line(colour = "#000000",
linewidth = 0.5),
axis.line.y.left = element_blank(),
plot.title = element_text(size = rel(1))
)
wilcox_test <- wilcox.test(formula = credibility ~ surprise,
data = data[treated == 1])
p_value <- wilcox_test$p.value
p_value_text <- ifelse(p_value < 0.01, "***", ifelse(p_value < 0.05, "**", ifelse(p_value < 0.10, "*", "ns")))
formatted_p_value <- format(x = p_value, digits = 3, scientific = TRUE)
ggplot(data = data[treated == 1],
mapping = aes(y = credibility,
x = surprise)) +
geom_bar(stat = "summary",
fun = mean,
fill = colors[2]) +
scale_y_continuous(limits = c(0, 4),
expand = c(0, NA)) +
geom_signif(comparisons = list(c("FALSE", "TRUE")),
annotations = paste0(formatted_p_value, " (", p_value_text, ")"),
y_position = 3.5,
tip_length = 0,
size = 0.5) +
labs(x = "Treatment",
y = "Credibility") +
layout
comparisons <- list(c("point", "interval"),
c("point", "both"),
c("interval", "both"))
p_values <- sapply(comparisons, function(comp) {
test <- wilcox.test(formula = credibility ~ communication,
data = data[treated == 1 & surprise == FALSE & communication %in% comp])
test$p.value
})
p_values_text <- sapply(p_values, function(p) {
ifelse(p < 0.01, "***", ifelse(p < 0.05, "**", ifelse(p < 0.10, "*", "ns")))
})
formatted_p_values <- format(x = p_values, digits = 3, scientific = TRUE)
ggplot(data = data[treated == 1],
mapping = aes(y = credibility,
x = communication)) +
geom_bar(stat = "summary",
fun = mean,
fill = colors[2]) +
scale_y_continuous(limits = c(0, 4),
expand = c(0, NA)) +
geom_signif(comparisons = comparisons,
annotations = paste0(formatted_p_values, " (", p_values_text, ")"),
y_position = c(3.0, 3.3, 3.6),
tip_length = 0,
size = 0.5) +
labs(x = "Treatment",
y = "Credibility") +
layout
ggplot(data = data[treated == 1],
mapping = aes(x = credibility, fill = surprise)) +
geom_histogram(aes(y = ..density..), position = "stack", binwidth = 0.5, color = "black") +
layout
ggplot(data = data[treated == 1],
mapping = aes(x = credibility, fill = surprise)) +
geom_histogram(aes(y = ..density..), position = "dodge", binwidth = 0.5, color = "black") +
layout
ggplot(data = data[treated == 1],
mapping = aes(x = credibility, fill = surprise)) +
geom_histogram(aes(y = ..density..),
position = "stack",
binwidth = 1,
color = "black") +
layout
ggplot(data = data[treated == 1],
mapping = aes(x = credibility, fill = surprise)) +
geom_histogram(aes(y = ..density..),
alpha = 0.66,
position = "stack",
binwidth = 1,
color = "black") +
layout
ggplot(data = data[treated == 1],
mapping = aes(x = credibility, fill = surprise)) +
geom_histogram(aes(y = ..density..),
alpha = 0.66,
position = "identity",
binwidth = 1,
color = "black") +
layout
ggplot(data = data[treated == 1],
mapping = aes(x = credibility, fill = surprise)) +
geom_histogram(aes(y = ..density..),
alpha = 0.66,
position = "identity",
binwidth = 1,
color = "black") +
scale_y_continuous(limits = c(0, 0.5),
expand = c(0, NA)) +
layout
ggplot(data = data[treated == 1],
mapping = aes(x = credibility, fill = surprise)) +
geom_histogram(aes(y = ..density..),
alpha = 0.66,
position = "identity",
binwidth = 1,
color = "black") +
scale_y_continuous(limits = c(0, 0.5),
expand = c(0, NA)) +
labs(x = "Surprise",
y = "Credibility") +
layout
ggplot(data = data[treated == 1],
mapping = aes(x = credibility, fill = surprise)) +
geom_histogram(aes(y = ..density..),
alpha = 0.66,
position = "identity",
binwidth = 1,
color = "black") +
scale_y_continuous(limits = c(0, 0.5),
expand = c(0, NA)) +
labs(x = "Credibility",
y = "Density") +
layout
ggplot(data = data[treated == 1 & surprise == FALSE],
mapping = aes(x = credibility, fill = communication)) +
geom_histogram(aes(y = ..density..),
alpha = 0.66,
position = "identity",
binwidth = 1,
color = "black") +
scale_y_continuous(limits = c(0, 0.5),
expand = c(0, NA)) +
labs(x = "Credibility",
y = "Density") +
layout
ggplot(data = data[treated == 1 & surprise == TRUE],
mapping = aes(x = credibility, fill = communication)) +
geom_histogram(aes(y = ..density..),
alpha = 0.66,
position = "identity",
binwidth = 1,
color = "black") +
scale_y_continuous(limits = c(0, 0.5),
expand = c(0, NA)) +
labs(x = "Credibility",
y = "Density") +
layout
#| output: false
options(repos = c(CRAN = "https://cran.r-project.org"))
if (!requireNamespace("groundhog", quietly = TRUE)) {
install.packages("groundhog")
library("groundhog")
}
pkgs <- c("magrittr", "data.table", "stringr", "Rmisc", "gt")
groundhog::groundhog.library(pkg = pkgs,
date = "2023-09-25")
data      <- readRDS(file="../data/processed/full.Rda")
timeSpent <- data.table::fread(file = "../data/raw/PageTimes-2021-09-15.csv")
raw       <- data.table::fread(file="../data/raw/all_apps_wide_2021-09-15.csv")
vars <- str_subset(string = names(data), pattern = "^.{1,4}$", negate = TRUE)
covariates <- data[stage == 1, ..vars]
#| output: false
options(repos = c(CRAN = "https://cran.r-project.org"))
if (!requireNamespace("groundhog", quietly = TRUE)) {
install.packages("groundhog")
library("groundhog")
}
pkgs <- c("magrittr", "data.table", "stringr", "Rmisc", "gt")
groundhog::groundhog.library(pkg = pkgs,
date = "2023-09-25")
data      <- readRDS(file="../data/processed/full.Rda")
vars <- str_subset(string = names(data), pattern = "^.{1,4}$", negate = TRUE)
covariates <- data[stage == 1, ..vars]
View(covariates)
#| output: false
options(repos = c(CRAN = "https://cran.r-project.org"))
if (!requireNamespace("groundhog", quietly = TRUE)) {
install.packages("groundhog")
library("groundhog")
}
pkgs <- c("magrittr", "data.table", "stringr", "Rmisc", "gt")
groundhog::groundhog.library(pkg = pkgs,
date = "2023-09-25")
data      <- readRDS(file="../data/processed/full.Rda")
vars <- str_subset(string = names(data), pattern = "^.{1,4}$", negate = TRUE)
covariates <- data[stage == 1, ..vars]
#| label: tbl-A.1
#| tbl-cap: "Descriptive statistics (control variables): Mean values per treatment"
long_df <- melt(covariates,
id.vars = c("surprise", "communication"),
measure.vars = c("age_18_34", "age_35_52", "age_53_plus", "female",
"high_education", "high_income", "married", "parentship",
"high_temperature", "high_usage", "high_general_risk",
"high_weather_risk", "high_accuracy", "high_credibility",
"temperature", "usage", "general_risk",
"weather_risk", "accuracy", "credibility"),
variable.name = "Variable",
value.name = "Value")
names(covariates)
#| output: false
options(repos = c(CRAN = "https://cran.r-project.org"))
if (!requireNamespace("groundhog", quietly = TRUE)) {
install.packages("groundhog")
library("groundhog")
}
pkgs <- c("magrittr", "data.table", "stringr", "Rmisc", "gt")
groundhog::groundhog.library(pkg = pkgs,
date = "2023-09-25")
data      <- readRDS(file="../data/processed/full.Rda")
vars <- str_subset(string = names(data), pattern = "^.{1,4}$", negate = TRUE)
covariates <- data[stage == 1, ..vars]
#| output: false
options(repos = c(CRAN = "https://cran.r-project.org"))
if (!requireNamespace("groundhog", quietly = TRUE)) {
install.packages("groundhog")
library("groundhog")
}
pkgs <- c("magrittr", "data.table", "stringr", "Rmisc", "gt")
groundhog::groundhog.library(pkg = pkgs,
date = "2023-09-25")
data      <- readRDS(file="../data/processed/full.Rda")
vars <- str_subset(string = names(data), pattern = "^.{1,4}$", negate = TRUE)
covariates <- data[stage == 1, ..vars]
#| label: tbl-A.1
#| tbl-cap: "Descriptive statistics (control variables): Mean values per treatment"
long_df <- melt(covariates,
id.vars = c("surprise", "communication"),
measure.vars = c("age_18_34", "age_35_52", "age_53_plus", "female",
"high_education", "high_income", "married", "parentship",
"high_temperature", "high_usage", "high_general_risk",
"high_weather_risk", "high_accuracy", "high_credibility",
"temperature", "usage", "general_risk",
"weather_risk", "accuracy", "credibility"),
variable.name = "Variable",
value.name = "Value")
pooled_summary <- long_df[, .(N = sum(!is.na(Value)),
Mean = mean(Value, na.rm = TRUE)),
by = .(Variable)]
summary_tmp <- long_df[, .(N = sum(!is.na(Value)),
Mean = mean(Value, na.rm = TRUE)),
by = .(surprise, communication, Variable)]
summary_table <- merge(pooled_summary, summary_tmp, by = "Variable", suffixes = c("_pooled", ""))
summary_table_wide <- dcast(summary_table, Variable + N_pooled + Mean_pooled ~ surprise + communication,
value.var = c("N", "Mean"))
setcolorder(summary_table_wide,
c("Variable", "N_pooled", "Mean_pooled",
"N_FALSE_point", "Mean_FALSE_point",
"N_FALSE_interval", "Mean_FALSE_interval",
"N_FALSE_both", "Mean_FALSE_both",
"N_TRUE_point", "Mean_TRUE_point",
"N_TRUE_interval", "Mean_TRUE_interval",
"N_TRUE_both", "Mean_TRUE_both"))
summary_table_wide %>%
gt() %>%
cols_label(
Variable = "Treatment Variable",
N_pooled = "N", Mean_pooled = "Mean",
N_TRUE_point = "N", Mean_TRUE_point = "Mean",
N_TRUE_interval = "N", Mean_TRUE_interval = "Mean",
N_TRUE_both = "N", Mean_TRUE_both = "Mean",
N_FALSE_point = "N", Mean_FALSE_point = "Mean",
N_FALSE_interval = "N", Mean_FALSE_interval = "Mean",
N_FALSE_both = "N", Mean_FALSE_both = "Mean") %>%
tab_spanner(
label = "Pooled",
columns = c(N_pooled, Mean_pooled)) %>%
tab_spanner(
label = "Point",
columns = c(N_TRUE_point, Mean_TRUE_point, N_FALSE_point, Mean_FALSE_point)) %>%
tab_spanner(
label = "Interval",
columns = c(N_TRUE_interval, Mean_TRUE_interval, N_FALSE_interval, Mean_FALSE_interval)) %>%
tab_spanner(
label = "Point + Interval",
columns = c(N_TRUE_both, Mean_TRUE_both, N_FALSE_both, Mean_FALSE_both)) %>%
tab_spanner(
label = "Confirmation",
columns = c(N_FALSE_point, Mean_FALSE_point, N_FALSE_interval, Mean_FALSE_interval, N_FALSE_both, Mean_FALSE_both)) %>%
tab_spanner(
label = "Contradiction",
columns = c(N_TRUE_point, Mean_TRUE_point, N_TRUE_interval, Mean_TRUE_interval, N_TRUE_both, Mean_TRUE_both)) %>%
fmt_number(
columns = starts_with("Mean"),
decimals = 3) %>%
fmt_number(
columns = starts_with("N"),
decimals = 0) %>%
cols_align(
align = "left",
columns = c(Variable)
)
#| output: false
options(repos = c(CRAN = "https://cran.r-project.org"))
if (!requireNamespace("groundhog", quietly = TRUE)) {
install.packages("groundhog")
library("groundhog")
}
pkgs <- c("magrittr", "data.table", "stringr", "lubridate", "glue", "knitr")
groundhog::groundhog.library(pkg = pkgs,
date = "2024-08-01")
pkgs <- c("magrittr", "data.table", "stringr", "lubridate", "glue", "knitr")
groundhog::groundhog.library(pkg = pkgs,
date = "2024-08-01")
raw <- data.table::fread(file = "../data/raw/all_apps_wide_2021-09-15.csv",
fill = TRUE)
time_spent <- data.table::fread(file = "../data/raw/PageTimes-2021-09-15.csv")

{
  "hash": "4f04fc9e34b05e2260301ad8f6584e70",
  "result": {
    "markdown": "# Online Appendix B {#sec-OAB}\n\n## Setup\n\n### Install Packages\n\nWe install the following packages using the `groundhog` package manager to increase computational reproducibility.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nif (!requireNamespace(\"groundhog\", quietly = TRUE)) {\n    install.packages(\"groundhog\")\n}\n\npkgs <- c(\"magrittr\", \"data.table\", \"stringr\", \"lubridate\", \"knitr\", \"glue\",\n          \"sandwich\", \"lmtest\",\n          \"ggplot2\", \"ggpubr\", \"rstatix\", \"patchwork\")\n\ngroundhog::groundhog.library(pkg = pkgs,\n                             date = \"2024-08-01\")\n\nrm(pkgs)\n```\n:::\n\n\n### Read Data\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# data <- data.table::fread(file = \"../data/processed/full.csv\")\ndata <- readRDS(file=\"../data/processed/full.Rda\")\n```\n:::\n\n\n\n### Design\n\nWe define some design features in the following:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncolors <- c(\"#F3B05C\", \"#1E4A75\", \"#65B5C0\", \"#AD5E21\")\n\nlayout <- theme(panel.background = element_rect(fill = \"white\"),\n                legend.key = element_rect(fill = \"white\"),\n                panel.grid.major.y = element_line(colour = \"grey\", \n                                                  linewidth = 0.25),\n                axis.ticks.y = element_blank(),\n                panel.grid.major.x = element_blank(),\n                axis.line.x.bottom = element_line(colour = \"#000000\", \n                                                  linewidth = 0.5),\n                axis.line.y.left = element_blank(),\n                plot.title = element_text(size = rel(1))\n)\n```\n:::\n\n\n\n### Helper Function\n\n\n\n\n::: {.cell}\n\n```{#lst-plot-bars .r .cell-code  caption=\"plot_bars()\"}\nplot_bars <- function(response = \"b\", surprise_sub = NA, limits = ylim(-0.1, 100.1)){\n  \n  if(response == \"b\"){\n      y_1 = 75\n      y_2 = 55\n    } else {\n      y_1 = 75\n      y_2 = 60\n    }\n  \n  if(!is.na(surprise_sub)){\n    # Plot bottom panels\n    tmp <- data[surprise == surprise_sub]\n    names(tmp)[names(tmp) == response] <- 'outcome'\n    \n    if(surprise_sub){\n      title <- \"Surprising Condition\"\n    } else {\n      title <- \"Confirming Condition\"\n    }\n    \n    test_stats_1 <- tmp %>% \n      group_by(communication) %>%\n      wilcox_test(formula = outcome ~ stage,\n                  paired = T) %>% \n      adjust_pvalue(method = \"none\") %>%\n      add_significance(p.col = \"p.adj\",\n                       cutpoints = c(0, 0.01, 0.05, 0.1, 1),\n                       symbols = c( \"***\", \"**\", \"*\", \"ns\")) %>%\n      as.data.table()\n    \n    \n    test_stats_2 <- tmp %>% \n      group_by(stage) %>%\n      wilcox_test(formula = outcome ~ communication) %>% \n      adjust_pvalue(method = \"none\") %>%\n      add_significance(p.col = \"p.adj\",\n                       cutpoints = c(0, 0.01, 0.05, 0.1, 1),\n                       symbols = c( \"***\", \"**\", \"*\", \"ns\")) %>%\n      as.data.table()\n    test_stats_2 <- test_stats_2[stage == 2]\n    \n    plot_bottom <- ggplot(data = tmp,\n           mapping = aes(x = as.factor(communication),\n                         y = outcome)) +\n        geom_bar(aes(fill = stage),\n                 position = \"dodge\", \n                 stat = \"summary\", \n                 fun = \"mean\") + \n      limits +\n      scale_fill_manual(values=c(\"black\", \"gray\")) +\n      theme_classic() +\n      stat_pvalue_manual(data = test_stats_2,\n                         label = \"{p} ({p.adj.signif})\", \n                         step.group.by = \"stage\",\n                         tip.length = 0, \n                         step.increase = 0.1, \n                         y.position = y_1) +\n      stat_pvalue_manual(data = test_stats_1,\n                         label = \"{p} ({p.adj.signif})\",\n                         y.position = y_2,\n                         tip.length = 0,\n                         x = \"communication\") +\n      labs(title = \"\",\n           x = \" Surprising Condition\",\n           y = glue(\" {response}\"))\n    \n    rm(tmp)\n    \n    plot_bottom\n  } else {\n    # Plot the top panel\n    tmp <- data\n    names(tmp)[names(tmp) == response] <- 'outcome'\n    \n    title <- \"Both Conditions\"\n    \n    test_stats_1 <- tmp %>% \n      group_by(surprise) %>%\n      wilcox_test(formula = outcome ~ stage,\n                  paired = T) %>% \n      adjust_pvalue(method = \"none\") %>%\n      add_significance(p.col = \"p.adj\",\n                       cutpoints = c(0, 0.01, 0.05, 0.1, 1),\n                       symbols = c( \"***\", \"**\", \"*\", \"ns\")) %>%\n      as.data.table()\n    \n    \n    test_stats_2 <- tmp %>% \n      group_by(stage) %>%\n      wilcox_test(formula = outcome ~ surprise) %>% \n      adjust_pvalue(method = \"none\") %>%\n      add_significance(p.col = \"p.adj\",\n                       cutpoints = c(0, 0.01, 0.05, 0.1, 1),\n                       symbols = c( \"***\", \"**\", \"*\", \"ns\")) %>%\n      as.data.table()\n    test_stats_2 <- test_stats_2[stage == 2]\n    \n    \n    plot_top <- ggplot(data = tmp,\n           mapping = aes(x = as.factor(surprise),\n                         y = outcome)) +\n        geom_bar(aes(fill = stage),\n                 position = \"dodge\", \n                 stat = \"summary\", \n                 fun = \"mean\") + \n      limits +\n      scale_fill_manual(values=c(\"black\", \"gray\")) +\n      theme_classic() +\n      stat_pvalue_manual(data = test_stats_2,\n                         label = \"{p} ({p.adj.signif})\", \n                         step.group.by = \"stage\",\n                         tip.length = 0, \n                         step.increase = 0.1, \n                         y.position = y_1) +\n      stat_pvalue_manual(data = test_stats_1,\n                         label = \"{p} ({p.adj.signif})\",\n                         y.position = y_2,\n                         tip.length = 0,\n                         x = \"surprise\") +\n      labs(title = \"\",\n           x = \" Surprising Condition\",\n           y = glue(\" {response}\"))\n    \n    rm(tmp)\n    \n    plot_top\n  }\n}\n```\n:::\n\n\n\n## Figure OB.1\n\nTo create @fig-OB1 (and the other figures), we use the wrapper function defined above. We'll call several times in what follows. As all the other figures presented in this document, @fig-OB1 consists of three panels, `top`, `left`, and `right` that are relatively similar. We thus, save both space and sources of error by creating a wrapper function `plot_bars()` that creates bar plots and annotates them with test statistics.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntop   <- plot_bars(response = \"E1\", surprise_sub = NA)\nleft  <- plot_bars(response = \"E1\", surprise_sub = FALSE)\nright <- plot_bars(response = \"E1\", surprise_sub = TRUE)\n\n(top / (left | right) & theme(legend.position = \"bottom\")) + plot_layout(guides = \"collect\")\n```\n\n::: {.cell-output-display}\n![Means of the matching probabilities for event E1 separated by treatments and part 1 and part 2. P-values of Wilcoxon signed-rank test comparing part 1 and 2 directly above the mean values. P-values of Wilcoxon–Mann–Whitney test comparing part 2 of different treatments at the top. Note: ∗p<0.10, ∗∗p<0.05, ∗∗∗p<0.01, ns: not significant](B-online-appendix_files/figure-html/fig-OB1-1.png){#fig-OB1 width=672}\n:::\n:::\n\n\n## Figure OB.2\n\nNext, we use the wrapper function again but visualize another outcome using the `response == E2` argument.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntop   <- plot_bars(response = \"E2\", surprise_sub = NA)\nleft  <- plot_bars(response = \"E2\", surprise_sub = FALSE)\nright <- plot_bars(response = \"E2\", surprise_sub = TRUE)\n\n(top / (left | right) & theme(legend.position = \"bottom\")) + plot_layout(guides = \"collect\")\n```\n\n::: {.cell-output-display}\n![Means of the matching probabilities for event E2 separated by treatments and part 1 and part 2. P-values of Wilcoxon signed-rank test comparing part 1 and 2 directly above the mean values. P-values of Wilcoxon–Mann–Whitney test comparing part 2 of different treatments at the top. Note: ∗p<0.10, ∗∗p<0.05, ∗∗∗p<0.01, ns: not significant](B-online-appendix_files/figure-html/fig-OB2-1.png){#fig-OB2 width=672}\n:::\n:::\n\n\n\n## Figure OB.3\n\nNext, we use the wrapper function again but visualize another outcome using the `response == E3` argument.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntop   <- plot_bars(response = \"E3\", surprise_sub = NA)\nleft  <- plot_bars(response = \"E3\", surprise_sub = FALSE)\nright <- plot_bars(response = \"E3\", surprise_sub = TRUE)\n\n(top / (left | right) & theme(legend.position = \"bottom\")) + plot_layout(guides = \"collect\")\n```\n\n::: {.cell-output-display}\n![Means of the matching probabilities for event E3 separated by treatments and part 1 and part 2. P-values of Wilcoxon signed-rank test comparing part 1 and 2 directly above the mean values. P-values of Wilcoxon–Mann–Whitney test comparing part 2 of different treatments at the top. Note: ∗p<0.10, ∗∗p<0.05, ∗∗∗p<0.01, ns: not significant](B-online-appendix_files/figure-html/fig-OB3-1.png){#fig-OB3 width=672}\n:::\n:::\n\n\n## Figure OB.4\n\nNext, we use the wrapper function again but visualize another outcome using the `response == E12` argument.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntop   <- plot_bars(response = \"E12\", surprise_sub = NA)\nleft  <- plot_bars(response = \"E12\", surprise_sub = FALSE)\nright <- plot_bars(response = \"E12\", surprise_sub = TRUE)\n\n(top / (left | right) & theme(legend.position = \"bottom\")) + plot_layout(guides = \"collect\")\n```\n\n::: {.cell-output-display}\n![Means of the matching probabilities for event E12 separated by treatments and part 1 and part 2. P-values of Wilcoxon signed-rank test comparing part 1 and 2 directly above the mean values. P-values of Wilcoxon–Mann–Whitney test comparing part 2 of different treatments at the top. Note: ∗p<0.10, ∗∗p<0.05, ∗∗∗p<0.01, ns: not significant](B-online-appendix_files/figure-html/fig-OB4-1.png){#fig-OB4 width=672}\n:::\n:::\n\n\n\n## Figure OB.5\n\nNext, we use the wrapper function again but visualize another outcome using the `response == E13` argument.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntop   <- plot_bars(response = \"E13\", surprise_sub = NA)\nleft  <- plot_bars(response = \"E13\", surprise_sub = FALSE)\nright <- plot_bars(response = \"E13\", surprise_sub = TRUE)\n\n(top / (left | right) & theme(legend.position = \"bottom\")) + plot_layout(guides = \"collect\")\n```\n\n::: {.cell-output-display}\n![Means of the matching probabilities for event E13 separated by treatments and part 1 and part 2. P-values of Wilcoxon signed-rank test comparing part 1 and 2 directly above the mean values. P-values of Wilcoxon–Mann–Whitney test comparing part 2 of different treatments at the top. Note: ∗p<0.10, ∗∗p<0.05, ∗∗∗p<0.01, ns: not significant](B-online-appendix_files/figure-html/fig-OB5-1.png){#fig-OB5 width=672}\n:::\n:::\n\n\n\n## Figure OB.6\n\nNext, we use the wrapper function again but visualize another outcome using the `response == E23` argument.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntop   <- plot_bars(response = \"E23\", surprise_sub = NA)\nleft  <- plot_bars(response = \"E23\", surprise_sub = FALSE)\nright <- plot_bars(response = \"E23\", surprise_sub = TRUE)\n\n(top / (left | right) & theme(legend.position = \"bottom\")) + plot_layout(guides = \"collect\")\n```\n\n::: {.cell-output-display}\n![Means of the matching probabilities for event E23 separated by treatments and part 1 and part 2. P-values of Wilcoxon signed-rank test comparing part 1 and 2 directly above the mean values. P-values of Wilcoxon–Mann–Whitney test comparing part 2 of different treatments at the top. Note: ∗p<0.10, ∗∗p<0.05, ∗∗∗p<0.01, ns: not significant](B-online-appendix_files/figure-html/fig-OB6-1.png){#fig-OB6 width=672}\n:::\n:::\n\n\n## Session Info {-}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsessionInfo()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nR version 4.4.1 (2024-06-14)\nPlatform: x86_64-apple-darwin20\nRunning under: macOS Sonoma 14.4.1\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.4-x86_64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.4-x86_64/Resources/lib/libRlapack.dylib;  LAPACK version 3.12.0\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: Europe/Zurich\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n [1] patchwork_1.2.0   rstatix_0.7.2     ggpubr_0.6.0      ggplot2_3.5.1    \n [5] lmtest_0.9-40     zoo_1.8-12        sandwich_3.1-0    glue_1.7.0       \n [9] knitr_1.48        lubridate_1.9.3   stringr_1.5.1     data.table_1.15.4\n[13] magrittr_2.0.3   \n\nloaded via a namespace (and not attached):\n [1] utf8_1.2.4        generics_0.1.3    tidyr_1.3.1       stringi_1.8.4    \n [5] lattice_0.22-6    digest_0.6.36     evaluate_0.24.0   grid_4.4.1       \n [9] timechange_0.3.0  fastmap_1.2.0     jsonlite_1.8.8    backports_1.5.0  \n[13] groundhog_3.2.0   purrr_1.0.2       fansi_1.0.6       scales_1.3.0     \n[17] abind_1.4-5       cli_3.6.3         rlang_1.1.4       munsell_0.5.1    \n[21] withr_3.0.1       yaml_2.3.10       tools_4.4.1       parallel_4.4.1   \n[25] ggsignif_0.6.4    dplyr_1.1.4       colorspace_2.1-1  broom_1.0.6      \n[29] vctrs_0.6.5       R6_2.5.1          lifecycle_1.0.4   car_3.1-2        \n[33] htmlwidgets_1.6.4 pkgconfig_2.0.3   pillar_1.9.0      gtable_0.3.5     \n[37] xfun_0.46         tibble_3.2.1      tidyselect_1.2.1  rstudioapi_0.16.0\n[41] farver_2.1.2      htmltools_0.5.8.1 labeling_0.4.3    carData_3.0-5    \n[45] rmarkdown_2.27    compiler_4.4.1   \n```\n:::\n:::\n",
    "supporting": [
      "B-online-appendix_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
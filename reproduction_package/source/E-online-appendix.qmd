# Online Appendix E

## Setup

### Install Packages

We install the following packages using the `groundhog` package manager to increase computational reproducibility.

```{r install_packages}
#| output: false

if (!requireNamespace("groundhog", quietly = TRUE)) {
    install.packages("groundhog")
}

pkgs <- c("magrittr", "data.table", "stringr", "Rmisc", "ggplot2", "patchwork",
          "rstatix", "ggpubr", "glue", "lubridate", "plyr", 
          "lmtest", "sandwich", "stargazer" # packages for regression tables
          )

groundhog::groundhog.library(pkg = pkgs,
                             date = "2024-08-01")

rm(pkgs)
```

### Read Data

```{r read_data}
# data <- data.table::fread(file = "../data/processed/full.csv")
data <- readRDS(file="../data/processed/full.Rda")
```

### Manipulate Data

```{r probabilites}
cols <- str_subset(string = names(data), pattern = "E\\d+")
data[, 
     str_replace_all(string = cols, pattern = "^E", replacement = "m") := lapply(.SD, function(x) x / 100), 
     .SDcols = cols] 

data[, p1 := 0.5 + (m1 - m23)/ (6*(mc-ms))]
data[, p2 := 0.5 + (m2 - m13)/ (6*(mc-ms))]
data[, p3 := 0.5 + (m3 - m12)/ (6*(mc-ms))]
```

```{r monotonicity_subset}
#| lst-label: lst-plot
#| lst-cap: Exclude Monotonicity Violations

strict_violators <- data[a >= 1 | 
                           E1 > E12 | E1 > E13 | 
                           E2 > E12 | E2 > E23 |
                           E3 > E13 | E3 > E23, 
                         unique(participant.label)]
subset <- data[!(participant.label %in% strict_violators)]
```

```{r wide_data}
wide_subset <- data.table::dcast(subset, 
                                 participant.label + surprise + communication ~ stage, 
                                 value.var = c("p1", "p2", "p3"))

setorder(wide_subset, surprise, communication, participant.label)
```

```{r euclidian_distance}
#| lst-label: lst-euclidian_distance
#| lst-cap: Calculate Euclidian Distance for Subjective Probability Proxy

wide_subset[, euclidian_distance := sqrt((p1_1 - p1_2)^2 +
                                           (p2_1 - p2_2)^2 +
                                           (p3_1 - p3_2)^2)]
```

### Design

We define some design features in the following:

```{r design_features}

colors <- c("#F3B05C", "#1E4A75", "#65B5C0", "#AD5E21")

layout <- theme(panel.background = element_rect(fill = "white"),
                legend.key = element_rect(fill = "white"),
                panel.grid.major.y = element_line(colour = "grey", 
                                                  linewidth = 0.25),
                axis.ticks.y = element_blank(),
                panel.grid.major.x = element_blank(),
                axis.line.x.bottom = element_line(colour = "#000000", 
                                                  linewidth = 0.5),
                axis.line.y.left = element_blank(),
                plot.title = element_text(size = rel(1))
)

```

### Helper Function

```{r bar_function_2}
#| lst-label: lst-plot-bars_2
#| lst-cap: plot_bars() for OAE

plot_bars2 <- function(data, response = "p", surprise_sub = NA, limits = ylim(-0.05, 1.02)){
  
  if(response == "p1" | response == "p2" | response == "p3"){
      y_1 = 0.6
      y_2 = 0.4
    } else {
      y_1 = 1.4
      y_2 = 1
    }
  
  if(!is.na(surprise_sub)){
    # Plot bottom panels
    tmp <- data[data$surprise == surprise_sub, ]
    names(tmp)[names(tmp) == response] <- 'outcome'
    
    if(surprise_sub){
      title <- "Surprising Condition"
    } else {
      title <- "Confirming Condition"
    }
    
    test_stats_1 <- tmp %>%
      dplyr::group_by(communication) %>%
      rstatix::wilcox_test(formula = outcome ~ stage, paired = TRUE) %>% 
      rstatix::adjust_pvalue(method = "none") %>%
      rstatix::add_significance(p.col = "p.adj",
                       cutpoints = c(0, 0.01, 0.05, 0.1, 1),
                       symbols = c("***", "**", "*", "ns")) %>%
      dplyr::as_tibble()
    
    test_stats_2 <- tmp %>%
      dplyr::group_by(stage) %>%
      rstatix::wilcox_test(formula = outcome ~ communication) %>% 
      rstatix::adjust_pvalue(method = "none") %>%
      rstatix::add_significance(p.col = "p.adj",
                       cutpoints = c(0, 0.01, 0.05, 0.1, 1),
                       symbols = c("***", "**", "*", "ns")) %>%
      dplyr::as_tibble()
    
    test_stats_2 <- test_stats_2[test_stats_2$stage == 2, ]
    
    plot_bottom <- ggplot2::ggplot(data = tmp,
           mapping = ggplot2::aes(x = as.factor(communication), y = outcome)) +
        ggplot2::geom_bar(ggplot2::aes(fill = stage),
                 position = "dodge", 
                 stat = "summary", 
                 fun = "mean") + 
      limits +
      ggplot2::scale_fill_manual(values=c("black", "gray")) +
      ggplot2::theme_classic() +
      ggpubr::stat_pvalue_manual(data = test_stats_2,
                         label = "{p} ({p.adj.signif})", 
                         step.group.by = "stage",
                         tip.length = 0, 
                         step.increase = 0.1, 
                         y.position = y_1) +
      ggpubr::stat_pvalue_manual(data = test_stats_1,
                         label = "{p} ({p.adj.signif})",
                         y.position = y_2,
                         tip.length = 0,
                         x = "communication") +
      ggplot2::labs(title = title, x = "Communication", y = glue::glue("{response}"))
    
    rm(tmp)
    
    return(plot_bottom)
  } else {
    # Plot the top panel
    tmp <- data
    names(tmp)[names(tmp) == response] <- 'outcome'
    
    title <- "Both Conditions"
    
    test_stats_1 <- tmp %>%
      dplyr::group_by(surprise) %>%
      rstatix::wilcox_test(formula = outcome ~ stage, paired = TRUE) %>% 
      rstatix::adjust_pvalue(method = "none") %>%
      rstatix::add_significance(p.col = "p.adj",
                       cutpoints = c(0, 0.01, 0.05, 0.1, 1),
                       symbols = c("***", "**", "*", "ns")) %>%
      dplyr::as_tibble()
    
    test_stats_2 <- tmp %>%
      dplyr::group_by(stage) %>%
      rstatix::wilcox_test(formula = outcome ~ surprise) %>% 
      rstatix::adjust_pvalue(method = "none") %>%
      rstatix::add_significance(p.col = "p.adj",
                       cutpoints = c(0, 0.01, 0.05, 0.1, 1),
                       symbols = c("***", "**", "*", "ns")) %>%
      dplyr::as_tibble()
    
    test_stats_2 <- test_stats_2[test_stats_2$stage == 2, ]
    
    plot_top <- ggplot2::ggplot(data = tmp,
           mapping = ggplot2::aes(x = as.factor(surprise), y = outcome)) +
        ggplot2::geom_bar(ggplot2::aes(fill = stage),
                 position = "dodge", 
                 stat = "summary", 
                 fun = "mean") + 
      limits +
      ggplot2::scale_fill_manual(values=c("black", "gray")) +
      ggplot2::theme_classic() +
      ggpubr::stat_pvalue_manual(data = test_stats_2,
                         label = "{p} ({p.adj.signif})", 
                         step.group.by = "stage",
                         tip.length = 0, 
                         step.increase = 0.1, 
                         y.position = y_1) +
      ggpubr::stat_pvalue_manual(data = test_stats_1,
                         label = "{p} ({p.adj.signif})",
                         y.position = y_2,
                         tip.length = 0,
                         x = "surprise") +
      ggplot2::labs(title = title, x = " Surprising Condition", y = glue::glue("{response}"))
    
    rm(tmp)
    
    return(plot_top)
  }
}
```


## Figures & Tables

We now consider the effects of information on so-called ambiguity neutral probabilities which have been suggested in @LiTurmunkhWakker_2019. This analysis complements the investigations on the effect on the probability equivalents for the individual events that are discussed in the main part of the paper.

Ambiguity-neutral probabilities are calculated according to equation (3.3) from @LiTurmunkhWakker_2019 [p. 56] which we simplify as follows:

$$
\begin{align*}
    p_1&=\frac{3(\overline{m_c}-\overline{m_s})+3m_1-3m_{23}+2(1-a)}{6(1-a)}\\
    &=\frac{3(\overline{m_c}-\overline{m_s})+3m_1-3m_{23}+2(1-(3 \times (\frac{1}{3} -(\overline{m_c}-\overline{m_s}))))}{6(1-(3 \times (\frac{1}{3} -(\overline{m_c}-\overline{m_s}))))}\\
        &=\frac{1}{2}+\frac{m_1-m_{23}}{6(\overline{m_c}-\overline{m_s})}.
\end{align*}
$$


We calculate  $p_2$ and $p_3$ accordingly. For the following analyses, we have adjusted our sample so that we meet the assumptions of @LiTurmunkhWakker_2019, namely we have removed all participants who have at least one part with $a=1$ or violate monotonicity ($m_i\leq m_{jk}$) at least once in part 1 or part 2 (see @lst-plot).  In total, this excludes 1200 participants.

The structure of the presentation of results follows the discussion in the main part of the paper.


### Figure OE.1

```{r fig_oe1}
#| label: fig-oe1
#| fig-cap: 'A-neutral probability $p_1$ separated by treatments and part 1 and part 2. P-values of Wilcoxon signed-rank test comparing part 1 and 2 directly above the mean values. P-values of Wilcoxon–Mann–Whitney test comparing part 2 of different treatments at the top. Note:	$^{*}$p$<$0.10, $^{**}$p$<$0.05, $^{***}$p$<$0.01, ns: not significant'

top   <- plot_bars2(data = subset, response = "p1", surprise_sub = NA)
left  <- plot_bars2(data = subset, response = "p1", surprise_sub = FALSE)
right <- plot_bars2(data = subset, response = "p1", surprise_sub = TRUE)

(top / (left | right) & theme(legend.position = "bottom")) + plot_layout(guides = "collect")
```

### Figure OE.2

```{r fig_oe2}
#| label: fig-oe2
#| fig-cap: 'A-neutral probability $p_2$ separated by treatments and part 1 and part 2. P-values of Wilcoxon signed-rank test comparing part 1 and 2 directly above the mean values. P-values of Wilcoxon–Mann–Whitney test comparing part 2 of different treatments at the top. Note:	$^{*}$p$<$0.10, $^{**}$p$<$0.05, $^{***}$p$<$0.01, ns: not significant'

top   <- plot_bars2(data = subset, response = "p2", surprise_sub = NA)
left  <- plot_bars2(data = subset, response = "p2", surprise_sub = FALSE)
right <- plot_bars2(data = subset, response = "p2", surprise_sub = TRUE)

(top / (left | right) & theme(legend.position = "bottom")) + plot_layout(guides = "collect")
```

### Figure OE.3

```{r fig_oe3}
#| label: fig-oe3
#| fig-cap: 'A-neutral probability $p_3$ separated by treatments and part 1 and part 2. P-values of Wilcoxon signed-rank test comparing part 1 and 2 directly above the mean values. P-values of Wilcoxon–Mann–Whitney test comparing part 2 of different treatments at the top. Note:	$^{*}$p$<$0.10, $^{**}$p$<$0.05, $^{***}$p$<$0.01, ns: not significant'

top   <- plot_bars2(data = subset, response = "p3", surprise_sub = NA)
left  <- plot_bars2(data = subset, response = "p3", surprise_sub = FALSE)
right <- plot_bars2(data = subset, response = "p3", surprise_sub = TRUE)

(top / (left | right) & theme(legend.position = "bottom")) + plot_layout(guides = "collect")
```

### Table OE.1

```{r tbl-OE1}
#| results: asis
#| label: tbl-OE1
#| tbl-cap: "Note:∗p<0.1; ∗∗p<0.05; ∗∗∗p<0.01. The underlying standard errors (“HC1”) are clustered at the individual level and estimated with the R package sandwich (Zeileis, 2004; Zeileis et al., 2020)"

ols_1 <- lm(formula = p1 ~ surprise + treated + surprise * treated,
              data = subset)
  se_1  <- coeftest(x = ols_1, 
                    vcov = vcovCL(ols_1,
                                  cluster = subset[, participant.label],
                                  type = "HC1"))
  
  ols_2 <- lm(formula = p1 ~ communication + treated + communication * treated, 
              data = subset,
              subset = (surprise == FALSE))
  se_2  <- coeftest(x = ols_2, 
                    vcov = vcovCL(ols_2,
                                  cluster = subset[surprise == FALSE, participant.label],
                                  type = "HC1"))
  
  ols_3 <- lm(formula = p1 ~ communication + treated + communication * treated, 
              data = subset,
              subset = (surprise == TRUE))
  se_3  <- coeftest(x = ols_3, 
                    vcov = vcovCL(ols_3,
                                  cluster = subset[surprise == TRUE, participant.label],
                                  type = "HC1"))
  
  ols_4 <- lm(formula = p1 ~ surprise + treated + surprise * treated, 
              data = subset,
              subset = (communication == "point"))
  se_4  <- coeftest(x = ols_4, 
                    vcov = vcovCL(ols_4,
                                  cluster = subset[communication == "point", participant.label],
                                  type = "HC1"))
  
  ols_5 <- lm(formula = p1 ~ surprise + treated + surprise * treated, 
              data = subset,
              subset = (communication == "interval"))
  se_5  <- coeftest(x = ols_5, 
                    vcov = vcovCL(ols_5,
                                  cluster = subset[communication == "interval", participant.label],
                                  type = "HC1"))
  
  ols_6 <- lm(formula = p1 ~ surprise + treated + surprise * treated, 
              data = subset,
              subset = (communication == "both"))
  se_6  <- coeftest(x = ols_6, 
                    vcov = vcovCL(ols_6,
                                  cluster = subset[communication == "both", participant.label],
                                  type = "HC1"))
  
  
  
  se <- list(se_1[,2], se_2[,2], se_3[,2], se_4[,2], se_5[,2], se_6[,2])
  p  <- list(se_1[,4], se_2[,4], se_3[,4], se_4[,4], se_5[,4], se_6[,4])
  
  stargazer(ols_1, ols_2, ols_3, ols_4, ols_5, ols_6, 
            align = TRUE, 
            se = se, 
            p = p,   
            title = "Linear regressions: Treatment effects on p1",
            model.names = FALSE,
            column.labels = c("full", "confirmation", "contradiction", "point", "interval", "both"),
            covariate.labels = c("contradiction", "both", "interval", "part2", "contradiction x stage 2", "both x stage2", "interval x stage2", "Constant"),
            font.size = "scriptsize",
            type = "html", 
            df = FALSE,
            style = "qje")
```


### Table OE.2

```{r tbl-OE2}
#| results: asis
#| label: tbl-OE2
#| tbl-cap: "Note:∗p<0.1; ∗∗p<0.05; ∗∗∗p<0.01. The underlying standard errors (“HC1”) are clustered at the individual level and estimated with the R package sandwich (Zeileis, 2004; Zeileis et al., 2020)"

ols_1 <- lm(formula = p2 ~ surprise + treated + surprise * treated,
              data = subset)
  se_1  <- coeftest(x = ols_1, 
                    vcov = vcovCL(ols_1,
                                  cluster = subset[, participant.label],
                                  type = "HC1"))
  
  ols_2 <- lm(formula = p2 ~ communication + treated + communication * treated, 
              data = subset,
              subset = (surprise == FALSE))
  se_2  <- coeftest(x = ols_2, 
                    vcov = vcovCL(ols_2,
                                  cluster = subset[surprise == FALSE, participant.label],
                                  type = "HC1"))
  
  ols_3 <- lm(formula = p2 ~ communication + treated + communication * treated, 
              data = subset,
              subset = (surprise == TRUE))
  se_3  <- coeftest(x = ols_3, 
                    vcov = vcovCL(ols_3,
                                  cluster = subset[surprise == TRUE, participant.label],
                                  type = "HC1"))
  
  ols_4 <- lm(formula = p2 ~ surprise + treated + surprise * treated, 
              data = subset,
              subset = (communication == "point"))
  se_4  <- coeftest(x = ols_4, 
                    vcov = vcovCL(ols_4,
                                  cluster = subset[communication == "point", participant.label],
                                  type = "HC1"))
  
  ols_5 <- lm(formula = p2 ~ surprise + treated + surprise * treated, 
              data = subset,
              subset = (communication == "interval"))
  se_5  <- coeftest(x = ols_5, 
                    vcov = vcovCL(ols_5,
                                  cluster = subset[communication == "interval", participant.label],
                                  type = "HC1"))
  
  ols_6 <- lm(formula = p2 ~ surprise + treated + surprise * treated, 
              data = subset,
              subset = (communication == "both"))
  se_6  <- coeftest(x = ols_6, 
                    vcov = vcovCL(ols_6,
                                  cluster = subset[communication == "both", participant.label],
                                  type = "HC1"))
  
  
  
  se <- list(se_1[,2], se_2[,2], se_3[,2], se_4[,2], se_5[,2], se_6[,2])
  p  <- list(se_1[,4], se_2[,4], se_3[,4], se_4[,4], se_5[,4], se_6[,4])
  
  stargazer(ols_1, ols_2, ols_3, ols_4, ols_5, ols_6, 
            align = TRUE, 
            se = se, 
            p = p,   
            title = "Linear regressions: Treatment effects on p2",
            model.names = FALSE,
            column.labels = c("full", "confirmation", "contradiction", "point", "interval", "both"),
            covariate.labels = c("contradiction", "both", "interval", "part2", "contradiction x stage 2", "both x stage2", "interval x stage2", "Constant"),
            font.size = "scriptsize",
            type = "html", 
            df = FALSE,
            style = "qje")
```


### Table OE.3

```{r tbl-OE3}
#| results: asis
#| label: tbl-OE3
#| tbl-cap: "Note:∗p<0.1; ∗∗p<0.05; ∗∗∗p<0.01. The underlying standard errors (“HC1”) are clustered at the individual level and estimated with the R package sandwich (Zeileis, 2004; Zeileis et al., 2020)"

ols_1 <- lm(formula = p3 ~ surprise + treated + surprise * treated,
              data = subset)
  se_1  <- coeftest(x = ols_1, 
                    vcov = vcovCL(ols_1,
                                  cluster = subset[, participant.label],
                                  type = "HC1"))
  
  ols_2 <- lm(formula = p3 ~ communication + treated + communication * treated, 
              data = subset,
              subset = (surprise == FALSE))
  se_2  <- coeftest(x = ols_2, 
                    vcov = vcovCL(ols_2,
                                  cluster = subset[surprise == FALSE, participant.label],
                                  type = "HC1"))
  
  ols_3 <- lm(formula = p3 ~ communication + treated + communication * treated, 
              data = subset,
              subset = (surprise == TRUE))
  se_3  <- coeftest(x = ols_3, 
                    vcov = vcovCL(ols_3,
                                  cluster = subset[surprise == TRUE, participant.label],
                                  type = "HC1"))
  
  ols_4 <- lm(formula = p3 ~ surprise + treated + surprise * treated, 
              data = subset,
              subset = (communication == "point"))
  se_4  <- coeftest(x = ols_4, 
                    vcov = vcovCL(ols_4,
                                  cluster = subset[communication == "point", participant.label],
                                  type = "HC1"))
  
  ols_5 <- lm(formula = p3 ~ surprise + treated + surprise * treated, 
              data = subset,
              subset = (communication == "interval"))
  se_5  <- coeftest(x = ols_5, 
                    vcov = vcovCL(ols_5,
                                  cluster = subset[communication == "interval", participant.label],
                                  type = "HC1"))
  
  ols_6 <- lm(formula = p3 ~ surprise + treated + surprise * treated, 
              data = subset,
              subset = (communication == "both"))
  se_6  <- coeftest(x = ols_6, 
                    vcov = vcovCL(ols_6,
                                  cluster = subset[communication == "both", participant.label],
                                  type = "HC1"))
  
  
  
  se <- list(se_1[,2], se_2[,2], se_3[,2], se_4[,2], se_5[,2], se_6[,2])
  p  <- list(se_1[,4], se_2[,4], se_3[,4], se_4[,4], se_5[,4], se_6[,4])
  
  stargazer(ols_1, ols_2, ols_3, ols_4, ols_5, ols_6, 
            align = TRUE, 
            se = se, 
            p = p,   
            title = "Linear regressions: Treatment effects on p3",
            model.names = FALSE,
            column.labels = c("full", "confirmation", "contradiction", "point", "interval", "both"),
            covariate.labels = c("contradiction", "both", "interval", "part2", "contradiction x stage 2", "both x stage2", "interval x stage2", "Constant"),
            font.size = "scriptsize",
            type = "html", 
            df = FALSE,
            style = "qje")
```


### Table OE.4


```{r T-OE4-Regressions}

ols_6_1 <- lm(formula = euclidian_distance ~ surprise, 
            data = wide_subset)
se_6_1  <- coeftest(ols_6_1, vcov = vcovHC(ols_6_1, type = "HC1"))

ols_6_2 <- lm(formula = euclidian_distance ~ communication, 
            data = wide_subset,
            subset = (surprise == FALSE))
se_6_2  <- coeftest(ols_6_2, vcov = vcovHC(ols_6_2, type = "HC1"))

ols_6_3 <- lm(formula = euclidian_distance ~ communication, 
            data = wide_subset,
            subset = (surprise == TRUE))
se_6_3  <- coeftest(ols_6_3, vcov = vcovHC(ols_6_3, type = "HC1"))

ols_6_4 <- lm(formula = euclidian_distance ~ surprise, 
            data = wide_subset,
            subset = (communication == "point"))
se_6_4  <- coeftest(ols_6_4, vcov = vcovHC(ols_6_4, type = "HC1"))

ols_6_5 <- lm(formula = euclidian_distance ~ surprise, 
            data = wide_subset,
            subset = (communication == "interval"))
se_6_5  <- coeftest(ols_6_5, vcov = vcovHC(ols_6_5, type = "HC1"))

ols_6_6 <- lm(formula = euclidian_distance ~ surprise, 
            data = wide_subset,
            subset = (communication == "both"))
se_6_6  <- coeftest(ols_6_6, vcov = vcovHC(ols_6_6, type = "HC1"))
```

```{r regression_output_table_OE4}
#| results: asis

se_6 <- list(se_6_1[,2], se_6_2[,2], se_6_3[,2], se_6_4[,2], se_6_5[,2], se_6_6[,2])
p_6  <- list(se_6_1[,4], se_6_2[,4], se_6_3[,4], se_6_4[,4], se_6_5[,4], se_6_6[,4])

stargazer(ols_6_1, ols_6_2, ols_6_3, ols_6_4, ols_6_5, ols_6_6, 
          align = TRUE, 
          se = se_6,
          p = p_6,   
          title = "Linear regressions: Treatment effects on Euclidian distance between vector of matching probabilities in part 1 vs. part 2",
          model.names = FALSE,
            column.labels = c("full", "confirmation", "contradiction", "point", "interval", "both"),
            covariate.labels = c("contradiction", "both", "interval",  "Constant"),
          font.size = "scriptsize",
          type = "html", 
          df = FALSE,
          style = "qje")

```

### Figure OE.4


